[{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"","tags":null,"title":"Marcelo Ribeiro","type":"authors"},{"authors":null,"categories":null,"content":"O que quero dizer com isso? Trabalhar em consultoria me traz a oportunidade de atuar em vários projetos de empresas completamente diferentes e, embora difiram, certas práticas parecem não mudar.\nPercebo em diversos lugares aplicações sendo criadas utilizando arquitetura de N camadas e com conceitos de DDD. Por que será? Porque virou boilerplate! Tornou-se sinônimo de “projeto bem arquiteturado”, logo, TODO projeto segue essa estrutura, dois mais simples ao mais complexos.\nO DDD existe para nos ajudar a atacar as complexidades no coração do software… …quando elas existem! E não para justificar a criação de um projeto com inúmeras camadas e com seus conceitos “só porque é legal e/ou porque parece ser mais certo”.\nSe você é desenvolvedor, já deve ter encontrado um projeto com uma estrutura mais ou menos assim (Se é desenvolvedor .NET, 99% são as chances que sim):\n[Empresa].[Projeto].[API] -\u0026gt; Controllers [Empresa].[Projeto].[Domain] -\u0026gt; Entities [Empresa].[Projeto].[Application] -\u0026gt; Services, Handlers [Empresa].[Projeto].[Infrastructure] -\u0026gt; Repositories, Context Vamos supor que os projetos mais simples de uma empresa sejam CRUDs, não há regras de negócio, apenas validações de inputs. O “Domain” (que não existe) naturalmente só vai conter Modelos anêmicos. Aqui é apenas CRUD, não tem como dar muito errado… Por que então gerar toda essa complexidade?\nAgora vamos supor um cenário de um projeto mais complexo: uma empresa que tenha necessidades muito específicas com regras de negócio que evoluam constantemente. O projeto precisa evoluir conforme a empresa evolui e nesse caso é necessário tratar o Domínio (que dessa vez realmente existe) com muita delicadeza.\nOcorre que muito provalvemente, o suposto projeto mais complexo será tratado como o projeto mais simples!\n– Mas agora a complexidade existe. Faria sentido criar as N camadas e “usar” DDD, não?\nNÃO! A ideia é atacar a complexidade, não gerá-la. Criar camadas e mais camadas e utilizar conceitos de DDD como foi feito nos projeto CRUDs, não resolve NADA por si só. É preciso entender os PORQUÊS das escolhas.\nAlém do mais, muito provavelmente o projeto será executado como os mais simples:\n1. \u0026#39;Criar o projeto com o Boilerplate (\u0026#34;N Camadas\u0026#34; + \u0026#34;DDD\u0026#34;)\u0026#39; 2. \u0026#39;Criar Models\u0026#39; 3. \u0026#39;Criar tabelas no banco de dados\u0026#39; 4. \u0026#39;Criar services e mais services\u0026#39; 5. \u0026#39;Repetir os itens [2, 3, 4, 5]\u0026#39; Diagamos que esse projeto realmente exista e a primeira entrega tenha sido um sucesso…\n…MAS VÍRGULA Acontece que o Domínio é complexo! Ele vai evoluir, mais processos surgirão e o projeto e nem a equipe estão preparados para isso. A Domain Model é anêmica, os processos e regras de negócio estão acoplados com serviços de aplicação. Como serão as próximas entregas dessa equipe?\nPela minha experência, posso dizer que geralmente termina com a famosa Big Ball of Mud.\nConclusão Mantenha simples o que é para ser simples (Keep it simple, stupid)! Lembre-se que não existe bala de prata e trate de complexidades como elas devem ser tratadas. Uma dica: foque no domínio.\nSim, a palavra “complexid4de” foi utilizada 7 vezes, e essa não é a oitava.\n","date":1654128e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1654128e3,"objectID":"333811e1bda8a35e6dc3795eff94dfa2","permalink":"/post/complexidade-everywhere/","publishdate":"2022-06-02T00:00:00Z","relpermalink":"/post/complexidade-everywhere/","section":"post","summary":"O que quero dizer com isso? Trabalhar em consultoria me traz a oportunidade de atuar em vários projetos de empresas completamente diferentes e, embora difiram, certas práticas parecem não mudar.","tags":null,"title":"Complexidade everywhere","type":"post"}]